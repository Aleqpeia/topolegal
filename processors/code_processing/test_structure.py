#!/usr/bin/env python3
"""
Test script to verify the extracted structure is correct
"""

import json
import sys
from pathlib import Path

# Add project to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from processors.code_processing.resources import LocalResourceConnector
from processors.code_processing.services.code_extraction_service import CodeExtractionService


class MockRepository:
    def create_table(self): pass
    def insert_entries_batch(self, entries): pass
    def get_statistics(self): return {}


def test_specific_structure():
    """Test if the parser extracts the correct structure for Article 1"""
    
    # Initialize components
    resource_connector = LocalResourceConnector()
    repository = MockRepository()
    extraction_service = CodeExtractionService(resource_connector, repository)
    
    # Parse and extract
    json_data = resource_connector.fetch_and_parse("criminal_process_code.htm")
    entries = extraction_service._extract_entries(json_data)
    
    # Find Article 1 entries
    article_1_entries = [e for e in entries if e.article_number == 1]
    
    print("=== TESTING ARTICLE 1 STRUCTURE ===")
    print(f"Found {len(article_1_entries)} entries for Article 1")
    print()
    
    expected_structure = {
        "section": "1",
        "section_name": "–ó–ê–ì–ê–õ–¨–ù–Ü –ü–û–õ–û–ñ–ï–ù–ù–Ø", 
        "heading": "1",
        "heading_name": "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞ —Å—Ñ–µ—Ä–∞ –π–æ–≥–æ –¥—ñ—ó",
        "article_number": 1,
        "article_name": "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏"
    }
    
    for i, entry in enumerate(article_1_entries):
        print(f"Entry {i+1}:")
        print(f"  code_entry: {entry.code_entry}")
        print(f"  article_number: {entry.article_number}")
        print(f"  article_name: {entry.article_name}")
        print(f"  section: {entry.section}")
        print(f"  section_name: {entry.section_name}")
        print(f"  heading: {entry.heading}")
        print(f"  heading_name: {entry.heading_name}")
        print(f"  paragraph: {entry.paragraph}")
        print(f"  text: {entry.code_entry_text[:100]}...")
        print()
        
        # Verify structure
        errors = []
        if entry.section != expected_structure["section"]:
            errors.append(f"Section mismatch: got '{entry.section}', expected '{expected_structure['section']}'")
        if entry.section_name != expected_structure["section_name"]:
            errors.append(f"Section name mismatch: got '{entry.section_name}', expected '{expected_structure['section_name']}'")
        if entry.heading != expected_structure["heading"]:
            errors.append(f"Heading mismatch: got '{entry.heading}', expected '{expected_structure['heading']}'")
        if entry.article_number != expected_structure["article_number"]:
            errors.append(f"Article number mismatch: got '{entry.article_number}', expected '{expected_structure['article_number']}'")
        if entry.paragraph is not None:
            errors.append(f"Paragraph should be None for code entries, got '{entry.paragraph}'")
            
        if errors:
            print(f"  ‚ùå ERRORS: {'; '.join(errors)}")
        else:
            print(f"  ‚úÖ Structure correct")
        print()
    
    # Test expected text content
    expected_texts = [
        "–ü–æ—Ä—è–¥–æ–∫ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –ª–∏—à–µ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–º –ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ–º –£–∫—Ä–∞—ó–Ω–∏.",
        "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –ø–æ–ª–æ–∂–µ–Ω—å",
        "–ó–º—ñ–Ω–∏ –¥–æ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –£–∫—Ä–∞—ó–Ω–∏ –º–æ–∂—É—Ç—å –≤–Ω–æ—Å–∏—Ç–∏—Å—è –≤–∏–∫–ª—é—á–Ω–æ –∑–∞–∫–æ–Ω–∞–º–∏"
    ]
    
    print("=== TESTING TEXT CONTENT ===")
    for i, (entry, expected_start) in enumerate(zip(article_1_entries, expected_texts)):
        if entry.code_entry_text.startswith(expected_start):
            print(f"‚úÖ Entry {i+1} text starts correctly")
        else:
            print(f"‚ùå Entry {i+1} text mismatch:")
            print(f"   Expected start: {expected_start}")
            print(f"   Actual start: {entry.code_entry_text[:len(expected_start)]}")
    
    return len(article_1_entries) == 3


if __name__ == "__main__":
    success = test_specific_structure()
    if success:
        print("\nüéâ All tests passed! The parser is working correctly.")
    else:
        print("\n‚ùå Some tests failed.")
        sys.exit(1) 